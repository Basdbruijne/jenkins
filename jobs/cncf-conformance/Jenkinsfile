@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())

pipeline {
    agent {
        label 'runner-amd64'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }

    stages {
        stage("Deploy") {
            options {
                timeout(time: 1, unit: 'HOURS')
            }
            steps {
                sh "juju kill-controller -y ${params.controller} || true"
                sh "juju bootstrap ${params.cloud} ${params.controller} --debug"
                deployCDK(controller: params.controller,
                          model: juju_model,
                          bundle: "cs:~containers/${params.bundle}",
                          version_overlay: params.version_overlay,
                          cloud: params.cloud,
                          bundle_channel: params.bundle_channel,
                          allow_privileged: true)
            }
        }
        stage('Deploy: sonobuoy') {
            steps {
                deploySonobuoy(params.controller, juju_model)
            }
        }
        stage('Test') {
            options {
                timeout(time: 2, unit: 'HOURS')
            }
            steps {
                waitUntil {
                    sh './sonobuoy status || true'
                    script {
                        def r = sh script:'./sonobuoy status|grep -q \'Sonobuoy has completed\'', returnStatus: true
                        return (r == 0);
                    }
                }
            }
        }
        stage('Archive') {
            steps {
                waitUntil {
                    script {
                        def r = sh script:'./sonobuoy retrieve results/.', returnStatus: true
                        return (r == 0);
                    }
                }
                archiveArtifacts artifacts: 'results/*.tar.gz'
            }
        }
    }
    post {
        always {
            collectDebug(params.controller,
                         juju_model)
            sh "juju kill-controller -y ${params.controller} || true"
        }
    }
}
