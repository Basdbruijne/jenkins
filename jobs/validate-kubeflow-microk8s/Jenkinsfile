@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())
def mnist_image = String.format("mnist-test-%s", uuid())

pipeline {
    agent {
        label 'runner-amd64'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Deploy: K8s') {
            options {
                timeout(time: 1, unit: 'HOURS')
            }
            steps {
                sh "juju kill-controller -y ${params.controller} || true"
                setStartTime()
                sh "juju bootstrap localhost ${params.controller} --debug"

                sh "microk8s.enable dns storage"
                sh "microk8s.config | juju add-k8s ${cloud}"
                sh "microk8s.docker build tfjobs/mnist/ -t ${mnist_image}"

                sh "juju add-model ${juju_model} ${cloud}"
                sh "juju create-storage-pool operator-storage kubernetes storage-class=microk8s-hostpath"
                sh "juju deploy kubeflow --channel ${params.bundle_channel}"

                sh "juju-wait -e ${params.controller}:${juju_model} -w"

                sh "juju config kubeflow-ambassador juju-external-hostname=localhost"
                sh "juju expose kubeflow-ambassador"
            }
        }

        stage('Validate') {
            options {
                timeout(time: 1, unit: 'HOURS')
            }

            steps {
                dir('jobs') {
                    sh "CONTROLLER=${params.controller} MODEL=${juju_model} MNIST_IMAGE=${mnist_image} tox -e py36 -- pytest -v -s --junit-xml=validate.xml integration/test_kubeflow.py::test_validate"
                }
            }
        }
    }
    post {
        success {
            setPass()
        }
        failure {
            setFail()
        }
        always {
            setEndTime()
            collectDebug(params.controller, juju_model)

        }
        cleanup {
            saveMeta()
            sh "juju kill-controller -y ${params.controller} || true"
            sh "juju remove-cloud ${cloud}"
            sh "microk8s.docker rmi ${mnist_image}"

        }
    }
}
