@Library('juju-pipeline@master') _

pipeline {
    agent {
        label 'juju-client'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
        JUJU_MODEL = "${params.model}-${env.BUILD_NUMBER}"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Install tools') {
            steps {
                installTools()
            }
        }
        stage('Deploy: CDK') {
            options {
                timeout(time: 1, unit: 'HOURS')
            }
            steps {
                deployCDK(params.controller,
                          env.JUJU_MODEL,
                          params.version_overlay,
                          params.bundle_channel)
            }
        }

        stage('Validate CDK') {
            when {
                beforeAgent true
                expression { return !params.perform_upgrade }
            }
            steps {
                sh "cd jobs && CONTROLLER=${params.controller} MODEL=${env.JUJU_MODEL} pipenv run pytest -v -s --junit-xml=validate.xml validate/test_cdk.py::test_validate"
            }
        }

        stage('Validate CDK: Stable -> Edge') {
            when {
                beforeAgent true
                expression { return params.perform_upgrade }
            }
            steps {
                sh "cd jobs && CONTROLLER=${params.controller} MODEL=${env.JUJU_MODEL} pipenv run pytest -v -s --junit-xml=validate-upgrade.xml validate/test_cdk.py::test_upgrade"
            }
        }
        // TODO: Needs to be broken out into own test as we already have a deployed CDK
        // stage('Bundletester') {
        //     steps {
        //         sh "cd jobs && CONTROLLER=${params.controller} MODEL=${env.JUJU_MODEL} pipenv run pytest --no-print-logs --junit-xml=report.xml validate/test_cdk.py::test_bundletester"
        //     }
        // }
    }
    post {
        always {
            junit 'jobs/*.xml, jobs/logs/**/**/*.xml'
            archiveArtifacts artifacts: 'jobs/logs/*', fingerprint: true
            tearDown(params.controller,
                     env.JUJU_MODEL)
        }
    }
}
