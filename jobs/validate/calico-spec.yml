meta:
  name: Verify CK with Calico
  description: |
    Verifies that CK with Calico passes integration tests
  mkdocs:
    destination:
      - "validations/ck/calico.md"

plan:
  - &BASE_JOB
    env:
      - SNAP_VERSION=1.16/edge
      - JUJU_DEPLOY_BUNDLE=cs:~containers/kubernetes-calico
      - JUJU_DEPLOY_CHANNEL=edge
      - JUJU_CLOUD=aws/us-east-2
      - JUJU_CONTROLLER=validate-ck
      - JUJU_MODEL=validate-model
      - TEST_BGP=1
    before-script:
      - python3 jobs/integration/tigera_aws.py cleanup
      - juju:
          description: Bootstrap and deploy kubernetes
          cloud: $JUJU_CLOUD
          controller: $JUJU_CONTROLLER
          model: $JUJU_MODEL
          bootstrap:
            debug: no
            run: |
              #!/bin/bash
              set -eux
              SET_NUM_SUBNETS=1
              if [ -z $TEST_BGP ]; then
                SET_NUM_SUBNETS=2
              fi

              NUM_SUBNETS=$SET_NUM_SUBNETS python3 $INTEGRATION_TEST_PATH/tigera_aws.py bootstrap
              if [ -z $TEST_BGP ]; then
                python3 $INTEGRATION_TEST_PATH/tigera_aws.py deploy-bgp-router
              fi
          deploy:
            bundle: $JUJU_DEPLOY_BUNDLE
            channel: $JUJU_DEPLOY_CHANNEL
            overlay: |
              applications:
                kubernetes-master:
                  options:
                    channel: $SNAP_VERSION
                kubernetes-worker:
                  options:
                    channel: $SNAP_VERSION
            wait: no
      - |
        #!/bin/bash
        set -eux
        python3 jobs/integration/tigera_aws.py disable-source-dest-check
        if [ -z $TEST_BGP ]; then
          python3 jobs/integration/tigera_aws.py configure-bgp
        fi
        juju-wait -e $JUJU_CONTROLLER:$JUJU_MODEL -w
    script:
      - |
        #!/bin/bash
        set -eux
        pytest $INTEGRATION_TEST_PATH/validation.py \
             --cloud $JUJU_CLOUD \
             --model $JUJU_MODEL \
             --controller $JUJU_CONTROLLER
    after-script:
      - juju-crashdump -a debug-layer -a config -m $JUJU_CONTROLLER:$JUJU_MODEL
      - aws s3 cp *.log s3://jenkaas/$JOB_NAME/$(date +"%Y/%m/%d")/$SNAP_VERSION/
      - aws s3 cp *.json s3://jenkaas/$JOB_NAME/$(date +"%Y/%m/%d")/$SNAP_VERSION/
      - aws s3 cp juju-crashdump* s3://jenkaas/$JOB_NAME/$(date +"%Y/%m/%d")/$SNAP_VERSION/
      - juju destroy-controller -y --destroy-all-models --destroy-storage $JUJU_CONTROLLER
  - <<: *BASE_JOB
    env:
      - SNAP_VERSION=1.15/edge
  - <<: *BASE_JOB
    env:
      - SNAP_VERSION=1.14/edge
  - <<: *BASE_JOB
    env:
      - SNAP_VERSION=1.13/edge

  # test upgrade
  - <<: *BASE_JOB
    env:
      - SNAP_VERSION=1.16/edge
  - <<: *BASE_JOB
    env:
      - SNAP_VERSION=1.15/edge
  - <<: *BASE_JOB
    env:
      - SNAP_VERSION=1.14/edge
  - <<: *BASE_JOB
    env:
      - SNAP_VERSION=1.13/edge
