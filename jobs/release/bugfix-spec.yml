# Run the jobs from order listed in plan
sequential: yes

plan:
  - condition:
      - python3 jobs/release/release-tracker.py --release-id $RELEASE_ID get-phase --name validate != 0
    env:
      - SNAP_VERSION=1.16/stable
      - JUJU_DEPLOY_BUNDLE=cs:~containers/charmed-kubernetes
      - JUJU_DEPLOY_CHANNEL=candidate
      - JUJU_CLOUD=aws/us-east-1
      - JUJU_CONTROLLER=release-ck-bugfix
      - JUJU_MODEL=release-ck-bugfix-model
    before-script:
      - juju:
          cloud: $JUJU_CLOUD
          controller: $JUJU_CONTROLLER
          model: $JUJU_MODEL
          bootstrap:
            constraints: "arch=amd64"
            debug: no
            replace-controller: yes
            model-default:
              - test-mode=true
              - resource-tags=owner=k8sci
          deploy:
            reuse: no
            bundle: $JUJU_DEPLOY_BUNDLE
            overlay: |
              applications:
                kubernetes-master:
                  options:
                    channel: $SNAP_VERSION
                kubernetes-worker:
                  options:
                    channel: $SNAP_VERSION
            wait: yes
            timeout: 7200
            channel: $JUJU_DEPLOY_CHANNEL
    script:
      - runner:
          timeout: 7200
          script: |
            #!/bin/bash
            set -x
            RET=$(pytest $INTEGRATION_TEST_PATH/validation.py \
                    --cloud $JUJU_CLOUD \
                    --model $JUJU_MODEL \
                    --controller $JUJU_CONTROLLER 2>&1)

            if [ $RET -ne 0 ]; then
                python3 jobs/release/release-tracker.py --release-id $RELEASE_ID set-phase --name validate --result fail
            else
                python3 jobs/release/release-tracker.py --release-id $RELEASE_ID set-phase --name validate --result pass
            fi

    after-script:
      - |
        #!/bin/bash
        set -x
        wget https://raw.githubusercontent.com/juju-solutions/cdk-field-agent/master/collect.py
        python3 collect.py -m $JUJU_CONTROLLER:$JUJU_MODEL
        python3 jobs/infra/collect-debug.py push 'cdk_field_agent' results*.tar.gz && rm -rf results*.tar.gz
        python3 jobs/infra/collect-debug.py push 'build_log' ogc.log
        python3 jobs/infra/collect-debug.py push 'metadata' metadata.json
        python3 jobs/infra/collect-debug.py push 'job_result' *job.json
        python3 jobs/infra/collect-debug.py set-key 'snap_version' "$SNAP_VERSION"
        python3 jobs/infra/collect-debug.py set-key 'juju_deploy_channel' "$JUJU_DEPLOY_CHANNEL"
        python3 jobs/infra/collect-debug.py save-meta metadata.json
        juju-crashdump -a debug-layer -a config -m "$JUJU_CONTROLLER:$JUJU_MODEL"
        python3 jobs/infra/collect-debug.py push 'results_file' juju-crashdump*
      - juju destroy-controller -y --destroy-all-models --destroy-storage $JUJU_CONTROLLER
    tags: [validate-ck-candidate]

meta:
  mkdocs:
    destination:
      - "releases/bugfix/index.md"
  name: Creating a bugfix release
  description: |
    Performs a Kubernetes bugfix release, which includes validation across the base
    deployment as well as variations including calico, tigera, vault, nvidia, and
    ceph.
  long-description: |
    ## Bugfix Release Process

    ### Cherry-pick fixes from master into stable branches

    ### Document release notes

    - Bugfixes
    - Enhancements
    - Known Limitations/Issues

    ### Tag existing stable branches with bugfix release tag

    **Job**: https://jenkins.canonical.com/k8s/job/sync-stable-tag-bugfix-rev/

    This will tag all stable repos with the k8s version and bugfix revision
    associated, for example, the first bugfix release of 1.16 would be
    **1.16+ck1**

    #### Charm tag options

    ![bugfix tag options](bugfix-tag-options.png)

    ### Run the **build-charms** job

    **Job**: https://jenkins.canonical.com/k8s/job/build-charms/

    This will build and promote the stable charms to candidate channel for testing.

    #### Charm build options

    ![build charm options](bugfix-options.png)

    ### Run **release-charm-bugfix** job

    **Job**: https://jenkins.canonical.com/k8s/job/release-charm-bugfix/

    This validates the deployment using the charms from candidate channel.

    ### Notify Solutions QA

    Notify solutions-qa that CK is ready to be run through their tests. Once
    that is complete and relayed to us, we can start the release to stable.

    ### Promote charms from **candidate** to **stable**

    **Job**: https://jenkins.canonical.com/k8s/job/promote-charms/

    This job takes a tag, from_channel, and to_channel. The tag defaults to `k8s` so
    it will only promote the necessary charms that make up charmed-kuberneetes (the
    others are kubeflow related).

    ### Promote bundles from **candidate** to **stable**

    **Job**: https://jenkins.canonical.com/k8s/job/promote-bundles/

    Same as charm promotion.

    ### Send announcement to k8s-crew with any relevant information.
