@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())
def juju_controller = String.format("%s-%s", params.controller, uuid())
def tox_sh = "tox -e py36"

pipeline {
    agent {
        label 'runner-amd64'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Deploy: K8s') {
            options {
                timeout(time: 1, unit: 'HOURS')
            }
            steps {
                sh "juju kill-controller -y ${juju_controller} || true"
                dir('jobs') {
                    sh "${tox_sh} -- python3 integration/tigera/cleanup_vpcs.py"
                    script {
                        sh "CONTROLLER=${juju_controller} ${tox_sh} -- python3 integration/tigera/bootstrap_aws_single_subnet.py"
                    }
                }
                setStartTime()
                deployCDK(controller: juju_controller,
                          model: juju_model,
                          bundle: "cs:~containers/${params.bundle}",
                          version_overlay: params.overlay,
                          bundle_channel: params.bundle_channel,
                          disable_wait: true)
                dir('jobs') {
                    sh "${tox_sh} -- python3 integration/tigera/disable_source_dest_check.py -m ${juju_controller}:${juju_model}"
                }
                sh "juju-wait -e ${juju_controller}:${juju_model} -w"
            }
        }

        stage('Validate') {
            options {
                timeout(time: 2, unit: 'HOURS')
            }

            steps {
                dir('jobs') {
                    sh "CONTROLLER=${juju_controller} MODEL=${juju_model} ${tox_sh} -- pytest -v -s --junit-xml=validate.xml integration/test_cdk.py::test_validate"
                }
            }
        }
    }
    post {
        failure {
            setFail()
        }
        success {
            setPass()
        }
        always {
            setEndTime()
            collectDebug(params.controller,
                         juju_model)
        }
        cleanup {
            saveMeta()
            dir('jobs') {
                script {
                    sh "juju kill-controller -y ${juju_controller} || true"
                    sh "${tox_sh} -- python3 integration/tigera/cleanup_vpcs.py"
                }
            }
        }
    }
}
