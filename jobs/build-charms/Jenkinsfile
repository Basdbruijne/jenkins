@Library('juju-pipeline@master') _
pipeline {
    agent {
        label 'runner'
    }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
        JUJU_REPOSITORY = "${env.WORKSPACE}/build/charms"
        TMPDIR = "${env.WORKSPACE}/tmp"
        JUJU_MODEL = "${params.model}-${params.charm}-${env.BUILD_NUMBER}"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }

    stages {
        stage('Setup') {
            steps {
                installTools()
                sh "mkdir -p ${env.JUJU_REPOSITORY}"
                sh "mkdir -p ${env.TMPDIR}"
            }
        }
        stage('Build') {
            options {
                timeout(time: 5, unit: 'MINUTES')
            }
            steps {
                sh "git clone -q ${params.git_repo}"
                retry(5){
                    sh "cd ${params.repo_name} && charm build -r --no-local-layers --force"
                }
            }
        }
        // TODO: Figure out why kupeapi-load-balancer bt is failing
        stage('Test') {
            steps {
                sh "juju add-model -c ${params.controller} ${env.JUJU_MODEL}"
                sh "juju model-config -m ${params.controller}:${env.JUJU_MODEL} test-mode=true"
                sh "cd ${JUJU_REPOSITORY}/builds/${params.charm} && charm proof"
                // Remove once tests are ported over
                // sh "bundletester -e '${params.controller}:${env.JUJU_MODEL}' -vF -t ${JUJU_REPOSITORY}/builds/${params.charm} -o report.xml -r xml"
            }
        }
        stage('Release to Store') {
            options {
                timeout(time: 5, unit: 'MINUTES')
            }
            steps {
                script {
                    def git_commit = sh script:"cd '${params.repo_name}' && git rev-parse HEAD", returnStdout: true
                    def charm_rev = sh script:"charm push '${env.JUJU_REPOSITORY}/builds/${params.charm}' 'cs:~containers/${params.charm}' | head -n 1 | awk '{print \$2}'", returnStdout: true
                    sh script:String.format("charm set '%s' commit='%s'", charm_rev.trim(), git_commit.trim())
                    sh script:String.format("CHARM='%s' FROM_CHANNEL='%s' TO_CHANNEL='%s' jobs/build-charms/promote-charm.sh", charm_rev.trim(),params.from_channel, params.to_channel)
                }
            }
        }
    }
    post {
        always {
            tearDown(params.controller,
                     env.JUJU_MODEL)
        }
    }
}
