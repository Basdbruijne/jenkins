@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())

pipeline {
    agent { label 'runner-amd64' }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "/snap/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
        JUJU_REPOSITORY = "${env.WORKSPACE}/build/charms"
        TMPDIR = "${env.WORKSPACE}/tmp"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Setup') {
            steps {
                sh "mkdir -p ${env.JUJU_REPOSITORY}"
                sh "mkdir -p ${env.TMPDIR}"
            }
        }
        stage('Build') {
            options {
                timeout(time: 15, unit: 'MINUTES')
            }
            steps {
                sh "git clone --depth 1 -q ${params.git_repo}"
                retry(5){
                    sh "cd ${params.repo_name} && charm build -r --no-local-layers --force"
                }
            }
        }
        stage('Test') {
            options {
                timeout(time: 2, unit: 'HOURS')
            }

            steps {
                dir("${JUJU_REPOSITORY}/builds/${params.charm}") {
                    sh "charm proof"
                }
                dir("jobs") {
                    sh "tox -e py36 -- flake8 ${JUJU_REPOSITORY}/builds/${params.charm}"
                    script {
                        def test_path = "integration/charm/test_${params.charm}.py"
                        if (fileExists(test_path)) {
                            sh "juju bootstrap ${params.cloud} ${params.controller} --debug"
                            sh "CHARM_PATH=${env.JUJU_REPOSITORY}/builds/${params.charm} CONTROLLER=${params.controller} MODEL=${juju_model} CLOUD=${params.cloud} tox -e py36 -- pytest --tb native -ra -v -s -n auto --junit-xml=${params.charm}.xml ${test_path}"
                        }
                    }

                }
            }
            post {
                always {
                    collectDebug(params.controller,
                                 juju_model)
                    sh "juju kill-controller -y ${params.controller}"
                }
            }
        }
        stage('Release to Store') {
            options {
                timeout(time: 5, unit: 'MINUTES')
            }
            steps {
                script {
                    def git_commit = sh script:"git rev-parse HEAD", returnStdout: true
                    // snap's need to pipe to cat so we can get the output
                    def charm = readYaml text:sh(script: "charm push ${env.JUJU_REPOSITORY}/builds/${params.charm} cs:~containers/${params.charm} | cat 2>&1", returnStdout: true)
                    sh(script: String.format("charm set '%s' commit='%s'",
                                             charm.url.trim(),
                                             git_commit.trim()))
                    sh(script: String.format("CHARM='%s' FROM_CHANNEL='unpublished' TO_CHANNEL='edge' jobs/build-charms/promote-charm.sh",
                                             charm.url.trim()))
                }
            }
        }
    }
}
