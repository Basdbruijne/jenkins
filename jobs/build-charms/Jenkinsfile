@Library('juju-pipeline@master') _

def juju_model = String.format("%s-%s", params.model, uuid())
def juju_controller = String.format("%s-%s", params.controller, uuid())
def charm_sh = "${utils.cipy} build-charms/charms.py"
def cs_url = "cs:~${params.namespace}/${params.charm}"

pipeline {
    agent { label 'runner-amd64' }
    /* XXX: Global $PATH setting doesn't translate properly in pipelines
     https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh
     */
    environment {
        PATH = "${utils.cipaths}"
        CHARM_BUILD_DIR = "${env.WORKSPACE}/build/charms"
        CHARM_LAYERS_DIR = "${env.WORKSPACE}/build/layers"
        CHARM_INTERFACES_DIR = "${env.WORKSPACE}/build/interfaces"
        TMPDIR = "${env.WORKSPACE}/tmp"
    }
    options {
        ansiColor('xterm')
        timestamps()
    }
    stages {
        stage('Setup') {
            steps {
                setStartTime()
                sh "mkdir -p ${env.CHARM_BUILD_DIR}"
                sh "mkdir -p ${env.CHARM_LAYERS_DIR}"
                sh "mkdir -p ${env.CHARM_INTERFACES_DIR}"
                sh "mkdir -p ${env.TMPDIR}"
            }
        }
        stage('Prep Layers') {
            steps {
                dir('jobs') {
                    sh "${charm_sh} pull-source --layer-index ${params.layer_index} --layers includes/charm-layer-list.inc --git-branch ${params.git_branch}"
                }
            }
        }
        stage('Build') {
            options {
                timeout(time: 60, unit: 'MINUTES')
            }
            steps {
                dir('jobs') {
                    sh "git clone --branch ${params.git_branch} --depth 1 -q ${params.git_repo}"
                    sh "CHARM_CACHE_DIR=${env.TMPDIR}/.charm ${charm_sh} build --repo-path ${params.repo_name} --out-path ${env.CHARM_BUILD_DIR}/${params.charm} --git-branch ${params.git_branch}"
                }
            }
        }
        stage('Test') {
            options {
                timeout(time: 2, unit: 'HOURS')
            }

            steps {
                dir("jobs") {
                    script {
                        def test_path = "integration/charm/test_${params.charm}.py"
                        if (fileExists(test_path)) {
                            sh "juju bootstrap ${params.cloud} ${juju_controller} --debug"
                            sh "CHARM_PATH=${env.CHARM_BUILD_DIR}/${params.charm} CONTROLLER=${juju_controller} MODEL=${juju_model} CLOUD=${params.cloud} ${utils.pytest} --tb native -ra -n auto --junit-xml=${params.charm}.xml ${test_path}"
                        }
                    }

                }
            }
            post {
                always {
                    setEndTime()
                }
            }
        }
        stage('Release to Store') {
            options {
                timeout(time: 45, unit: 'MINUTES')
            }
            steps {
                dir('jobs') {
                    sh "${charm_sh} push --repo-path ${params.repo_name} --out-path ${env.CHARM_BUILD_DIR}/${params.charm} --charm-entity ${cs_url}"
                    script {
                        if(params.resource_build_sh) {
                            sh "${charm_sh} resource --charm-entity ${cs_url} --builder ${params.repo_name}/${params.resource_build_sh} --out-path ${env.CHARM_BUILD_DIR}/tmp/${params.charm} --resource-spec build-charms/resource-spec.yaml"
                        }
                    }
                    sh "${charm_sh} promote --charm-entity ${cs_url} --from-channel unpublished --to-channel ${params.to_channel}"
                    sh "${charm_sh} show --charm-entity ${cs_url} --channel ${params.to_channel}"
                }
            }
        }
    }
    post {
        failure {
            setFail()
        }
        success {
            setPass()
        }

        cleanup {
            saveMeta()
            collectDebug(juju_controller, juju_model)
            tearDown(juju_controller)
        }
    }
}
